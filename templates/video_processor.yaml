entrypoint: main
arguments:
    parameters:
    - name: source
      value: https://github.com/onepanelio/cvat-training.git
    - name: input-video
      value: "raw-input/20200703/20200703_132826.mp4"
    - name: output-path
      value: "raw-input/raw_input_processed_workflow"
    - name: gps-csv-path
      value: "raw-input/20200703/20200703_132826_gps.csv"
    - name: skip
      value: 7
    - name: num-frames
      value: None
      hint: "Total number of frames you want in the output video. Leave 'None' for all frames."
volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 50Gi
  - metadata:
      name: output
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 50Gi
templates:
  - name: main
    dag:
      tasks:
      - name: process-video
        template: video

  - name: video
    inputs:
      artifacts:
      - name: src
        path: /mnt/src
        git:
          repo: "{{workflow.parameters.source}}"
      - name: data
        path: /mnt/data/datasets/temp.mp4
        s3:
          key: "{{workflow.parameters.input-video}}"
      - name: csv
        path: /mnt/data/datasets/gps.csv
        s3:
          key: "{{workflow.parameters.gps-csv-path}}"
    outputs:
      artifacts:
      - name: output
        path: /mnt/output
        optional: true
        s3:
            key: "{{workflow.parameters.output-path}}"
    container:
      image: tensorflow/tensorflow:1.13.1-py3
      command: [sh,-c]
      args:
        - |
          apt-get update && \
          apt-get install -y python3-pip libglib2.0-0 libsm6 libxext6 libxrender-dev && \
          pip install opencv-python && \
          python /mnt/src/utils/process_video.py --video={{workflow.parameters.input-video}} --skip={{workflow.parameters.skip}} --csv_file={{workflow.parameters.gps-csv-path}} --num_frames={{workflow.parameters.num-frames}}
          
      
      workingDir: /mnt/src
      volumeMounts:
      - name: data
        mountPath: /mnt/data
      - name: output
        mountPath: /mnt/output
  - name: slack-notify-success
    container:
      image: technosophos/slack-notify
      command: [sh,-c]
      args: ['SLACK_USERNAME=Worker SLACK_TITLE="{{workflow.name}} {{inputs.parameters.status}}" SLACK_ICON=https://www.gravatar.com/avatar/5c4478592fe00878f62f0027be59c1bd SLACK_MESSAGE=$(cat /tmp/metrics.json)} ./slack-notify']
    inputs:
      parameters:
      - name: status
      artifacts:
      - name: metrics
        path: /tmp/metrics.json
        optional: true
